--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.15.1 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Events.Reliable[2] = {}
Queue.Reliable[2] = table.create(256)
local function WriteEVENT_ReadyPacket(Value: nil): ()
	-- Allocate BLOCK: 1 bytes
	local BLOCK_START = Allocate(1)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
end

local function WriteEVENT_ClientToServer(Value: { position: Vector3, rotation: Vector3 }): ()
	-- Allocate BLOCK: 49 bytes
	local BLOCK_START = Allocate(49)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	local Vector = Value.position
	buffer.writef64(SendBuffer, BLOCK_START + 1, Vector.X)
	buffer.writef64(SendBuffer, BLOCK_START + 9, Vector.Y)
	buffer.writef64(SendBuffer, BLOCK_START + 17, Vector.Z)
	local Vector = Value.rotation
	buffer.writef64(SendBuffer, BLOCK_START + 25, Vector.X)
	buffer.writef64(SendBuffer, BLOCK_START + 33, Vector.Y)
	buffer.writef64(SendBuffer, BLOCK_START + 41, Vector.Z)
end

local function ReadEVENT_ServerToClient(): ({ player: Player, position: Vector3, rotation: Vector3 })
	-- Read BLOCK: 48 bytes
	local BLOCK_START = Read(48)
	local Value = {} :: any
	RecieveInstanceCursor += 1
	Value.player = RecieveInstances[RecieveInstanceCursor]
	if (not Value.player) or typeof(Value.player) ~= "Instance" then error(`Expected an Instance, got {typeof(Value.player)} instead.`) end
	if not Value.player:IsA("Player") then error(`Expected an Instance of type "Player", got "{Value.player.ClassName}" instead.`) end
	local X = buffer.readf64(RecieveBuffer, BLOCK_START + 0)
	local Y = buffer.readf64(RecieveBuffer, BLOCK_START + 8)
	local Z = buffer.readf64(RecieveBuffer, BLOCK_START + 16)
	Value.position = Vector3.new(X, Y, Z)
	X = buffer.readf64(RecieveBuffer, BLOCK_START + 24)
	Y = buffer.readf64(RecieveBuffer, BLOCK_START + 32)
	Z = buffer.readf64(RecieveBuffer, BLOCK_START + 40)
	Value.rotation = Vector3.new(X, Y, Z)
	return Value
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	ReadyPacket = {
		Fire = NOOP
	},
	ClientToServer = {
		Fire = NOOP
	},
	ServerToClient = {
		On = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsClient() then
    error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild("BLINK_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:WaitForChild("BLINK_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local function StepReplication()
    if SendCursor <= 0 then
        return
    end

    local Buffer = buffer.create(SendCursor)
    buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
    Reliable:FireServer(Buffer, SendInstances)

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    table.clear(SendInstances)
end
local Elapsed = 0
RunService.Heartbeat:Connect(function(DeltaTime: number)
	Elapsed += DeltaTime
	if Elapsed >= (1 / 61) then
		Elapsed -= (1 / 61)
		StepReplication()
	end
end)
Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 2 then
			local Value: { player: Player, position: Vector3, rotation: Vector3 } = ReadEVENT_ServerToClient()
			if #Events.Reliable[2] > 0 then
				for _, Listener in Events.Reliable[2] do
					task.spawn(Listener, Value)
				end
			else
				if #Queue.Reliable[2] > 256 then
					warn("[Blink]: Event queue of \"ServerToClient\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[2], {Value} :: {any})
			end
		end
	end
end)
Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	ReadyPacket = {
		Fire = function(Value: nil): ()
			WriteEVENT_ReadyPacket(Value)
		end
	},
	ClientToServer = {
		Fire = function(Value: { position: Vector3, rotation: Vector3 }): ()
			WriteEVENT_ClientToServer(Value)
		end
	},
	ServerToClient = {
		On = function(Listener: (Value: { player: Player, position: Vector3, rotation: Vector3 }) -> ()): () -> ()
			table.insert(Events.Reliable[2], Listener)
			for Index, Arguments in Queue.Reliable[2] do
				task.spawn(Listener, table.unpack(Arguments))
			end
			Queue.Reliable[2] = {}
			return function (): ()
				table.remove(Events.Reliable[2], table.find(Events.Reliable[2], Listener))
			end
		end
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL