--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.15.1 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Events.Reliable[0] = {}
Queue.Reliable[0] = table.create(256)
Events.Reliable[1] = {}
Queue.Reliable[1] = table.create(256)
local function ReadEVENT_ReadyPacket(): (nil)
	return nil
end

local function ReadEVENT_ClientToServer(): ({ cframe: CFrame })
	-- Read BLOCK: 12 bytes
	local BLOCK_START = Read(12)
	local Value = {} :: any
	local Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local X
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			X = -math.huge
		else
			X = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		X = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		X = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		X = if Encoded // 0x8000 == 1 then -Result else Result
	end
	Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 2)
	local Y
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			Y = -math.huge
		else
			Y = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		Y = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		Y = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		Y = if Encoded // 0x8000 == 1 then -Result else Result
	end
	Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 4)
	local Z
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			Z = -math.huge
		else
			Z = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		Z = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		Z = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		Z = if Encoded // 0x8000 == 1 then -Result else Result
	end
	local Position = Vector3.new(X, Y, Z)
	Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 6)
	local rX
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			rX = -math.huge
		else
			rX = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		rX = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		rX = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		rX = if Encoded // 0x8000 == 1 then -Result else Result
	end
	Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 8)
	local rY
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			rY = -math.huge
		else
			rY = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		rY = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		rY = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		rY = if Encoded // 0x8000 == 1 then -Result else Result
	end
	Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 10)
	local rZ
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			rZ = -math.huge
		else
			rZ = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		rZ = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		rZ = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		rZ = if Encoded // 0x8000 == 1 then -Result else Result
	end
	Value.cframe = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
	return Value
end

local function WriteEVENT_ServerToClient(Value: { player: Player, cframe: CFrame }): ()
	-- Allocate BLOCK: 13 bytes
	local BLOCK_START = Allocate(13)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 2)
	table.insert(SendInstances, Value.player or false :: any)
	local Vector = Value.cframe.Position
	if Vector.X > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 1, 0b0_11111_0000000000)
	elseif Vector.X < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 1, 0b1_11111_0000000000)
	elseif Vector.X ~= Vector.X then
		buffer.writeu16(SendBuffer, BLOCK_START + 1, 0b1_11111_0000000001)
	elseif Vector.X == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 1, 0)
	else
		local float = Vector.X
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 1, Result)
	end
	if Vector.Y > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 3, 0b0_11111_0000000000)
	elseif Vector.Y < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 3, 0b1_11111_0000000000)
	elseif Vector.Y ~= Vector.Y then
		buffer.writeu16(SendBuffer, BLOCK_START + 3, 0b1_11111_0000000001)
	elseif Vector.Y == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 3, 0)
	else
		local float = Vector.Y
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 3, Result)
	end
	if Vector.Z > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 5, 0b0_11111_0000000000)
	elseif Vector.Z < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 5, 0b1_11111_0000000000)
	elseif Vector.Z ~= Vector.Z then
		buffer.writeu16(SendBuffer, BLOCK_START + 5, 0b1_11111_0000000001)
	elseif Vector.Z == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 5, 0)
	else
		local float = Vector.Z
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 5, Result)
	end
	local rX, rY, rZ = Value.cframe:ToOrientation()
	if rX > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 7, 0b0_11111_0000000000)
	elseif rX < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 7, 0b1_11111_0000000000)
	elseif rX ~= rX then
		buffer.writeu16(SendBuffer, BLOCK_START + 7, 0b1_11111_0000000001)
	elseif rX == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 7, 0)
	else
		local float = rX
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 7, Result)
	end
	if rY > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 9, 0b0_11111_0000000000)
	elseif rY < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 9, 0b1_11111_0000000000)
	elseif rY ~= rY then
		buffer.writeu16(SendBuffer, BLOCK_START + 9, 0b1_11111_0000000001)
	elseif rY == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 9, 0)
	else
		local float = rY
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 9, Result)
	end
	if rZ > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 11, 0b0_11111_0000000000)
	elseif rZ < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 11, 0b1_11111_0000000000)
	elseif rZ ~= rZ then
		buffer.writeu16(SendBuffer, BLOCK_START + 11, 0b1_11111_0000000001)
	elseif rZ == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 11, 0)
	else
		local float = rZ
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 11, Result)
	end
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	ReadyPacket = {
		On = NOOP
	},
	ClientToServer = {
		On = NOOP
	},
	ServerToClient = {
		Fire = NOOP,
		FireAll = NOOP,
		FireList = NOOP,
		FireExcept = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsServer() then
    error("Server network module can only be required from the server.")
end

local Reliable: RemoteEvent = ReplicatedStorage:FindFirstChild("BLINK_RELIABLE_REMOTE") :: RemoteEvent
if not Reliable then
    local RemoteEvent = Instance.new("RemoteEvent")
    RemoteEvent.Name = "BLINK_RELIABLE_REMOTE"
    RemoteEvent.Parent = ReplicatedStorage
    Reliable = RemoteEvent
end

local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:FindFirstChild("BLINK_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent
if not Unreliable then
    local UnreliableRemoteEvent = Instance.new("UnreliableRemoteEvent")
    UnreliableRemoteEvent.Name = "BLINK_UNRELIABLE_REMOTE"
    UnreliableRemoteEvent.Parent = ReplicatedStorage
    Unreliable = UnreliableRemoteEvent
end

local PlayersMap: {[Player]: BufferSave} = {}

Players.PlayerRemoving:Connect(function(Player)
    PlayersMap[Player] = nil
end)

local function StepReplication()
    for Player, Send in PlayersMap do
        if Send.Cursor <= 0 then
            continue
        end

        local Buffer = buffer.create(Send.Cursor)
        buffer.copy(Buffer, 0, Send.Buffer, 0, Send.Cursor)
        Reliable:FireClient(Player, Buffer, Send.Instances)

        Send.Size = 64
        Send.Cursor = 0
        Send.Buffer = buffer.create(64)
        table.clear(Send.Instances)
    end
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value: nil = ReadEVENT_ReadyPacket()
			if #Events.Reliable[0] > 0 then
				for _, Listener in Events.Reliable[0] do
					task.spawn(Listener, Player, Value)
				end
			else
				if #Queue.Reliable[0] > 256 then
					warn("[Blink]: Event queue of \"ReadyPacket\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[0], {Player, Value} :: {any})
			end
		elseif Index == 1 then
			local Value: { cframe: CFrame } = ReadEVENT_ClientToServer()
			if #Events.Reliable[1] > 0 then
				for _, Listener in Events.Reliable[1] do
					task.spawn(Listener, Player, Value)
				end
			else
				if #Queue.Reliable[1] > 256 then
					warn("[Blink]: Event queue of \"ClientToServer\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[1], {Player, Value} :: {any})
			end
		end
	end
end)
Unreliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	ReadyPacket = {
		On = function(Listener: (Player: Player, Value: nil) -> ()): () -> ()
			table.insert(Events.Reliable[0], Listener)
			for Index, Arguments in Queue.Reliable[0] do
				task.spawn(Listener, table.unpack(Arguments))
			end
			Queue.Reliable[0] = {}
			return function (): ()
				table.remove(Events.Reliable[0], table.find(Events.Reliable[0], Listener))
			end
		end
	},
	ClientToServer = {
		On = function(Listener: (Player: Player, Value: { cframe: CFrame }) -> ()): () -> ()
			table.insert(Events.Reliable[1], Listener)
			for Index, Arguments in Queue.Reliable[1] do
				task.spawn(Listener, table.unpack(Arguments))
			end
			Queue.Reliable[1] = {}
			return function (): ()
				table.remove(Events.Reliable[1], table.find(Events.Reliable[1], Listener))
			end
		end
	},
	ServerToClient = {
		Fire = function(Player: Player, Value: { player: Player, cframe: CFrame }): ()
			Load(PlayersMap[Player])
			WriteEVENT_ServerToClient(Value)
			PlayersMap[Player] = Save()
		end,
		FireAll = function(Value: { player: Player, cframe: CFrame }): ()
			Load()
			WriteEVENT_ServerToClient(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireList = function(List: {Player}, Value: { player: Player, cframe: CFrame }): ()
			Load()
			WriteEVENT_ServerToClient(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in List do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireExcept = function(Except: Player, Value: { player: Player, cframe: CFrame }): ()
			Load()
			WriteEVENT_ServerToClient(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				if Player == Except then
					continue
				end
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL